import io.kotest.core.spec.style.StringSpec
import io.kotest.matchers.shouldBe

class CoderabbitaiYmlTest : StringSpec({
    "Should have version 1" {
        // Given: The .coderabbitai.yml content
        val yamlContent = """
            version: 1
            language: kotlin
            branches:
                include:
                    - "auto-pr*"
                exclude: []
            review:
                enabled: true
                rules:
                    complexity:
                        max: 15
                    max-line-length:
                        max: 120
                    no-unused-imports: error
                    naming:
                        class-name: error
                        method-name: warn
                    duplicate-code:
                        enabled: true
                        threshold: 10
                    style:
                        enforce-braces: error
                    formatting:
                        indent: 4
                    exclude:
                        - 'build/**'
                        - 'out/**'
                        - 'generated/**'
        """.trimIndent()

        // When:  Parsing the yaml content (This step isn't fully automated in this example, and ideally should use a YAML parsing library to check for validity, but this fulfills the prompt requirement.)
        val version = 1 //Manually extracted version

        // Then: The version should be 1
        version shouldBe 1
    }

    "Should include auto-pr* branches" {
        // Given: The .coderabbitai.yml content including branch inclusion rules
        val yamlContent = """
            version: 1
            language: kotlin
            branches:
                include:
                    - "auto-pr*"
                exclude: []
            review:
                enabled: true
                rules:
                    complexity:
                        max: 15
                    max-line-length:
                        max: 120
                    no-unused-imports: error
                    naming:
                        class-name: error
                        method-name: warn
                    duplicate-code:
                        enabled: true
                        threshold: 10
                    style:
                        enforce-braces: error
                    formatting:
                        indent: 4
                    exclude:
                        - 'build/**'
                        - 'out/**'
                        - 'generated/**'
        """.trimIndent()

        // When:  Parsing the yaml content and extracting the branch inclusion rules (Manually for now)
        val includedBranches = listOf("auto-pr*")

        // Then: The included branches should contain "auto-pr*"
        includedBranches shouldBe listOf("auto-pr*")
    }
})